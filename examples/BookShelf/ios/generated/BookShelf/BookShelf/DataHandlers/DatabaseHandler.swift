//
//  DatabaseHandler.swift
//  BookShelf//
//  Automatically generated by MobileCodeGenerator 3.
//  Copyright Â© 2017 . All rights reserved.
//

import Foundation
import CoreData
import UIKit

class DatabaseHandler{
    
    static let shared = DatabaseHandler()
    private var context: NSManagedObjectContext
    
    init(){
        let application = UIApplication.shared.delegate as! AppDelegate
        self.context = application.persistentContainer.viewContext
    }
    
    class func saveBook(ISBN: String, title: String, description_: String, pageCount: Int32, publisher: String, publishedDate: String, author: String) {
        
        // retrieve entity
        let entity = NSEntityDescription.entity(forEntityName: "Book", in: shared.context)
        
        // setting attributes
        let options = NSManagedObject(entity: entity!, insertInto: shared.context)
        options.setValue(ISBN, forKey: "ISBN")
        options.setValue(title, forKey: "title")
        options.setValue(description_, forKey: "description_")
        options.setValue(pageCount, forKey: "pageCount")
        options.setValue(publisher, forKey: "publisher")
        options.setValue(publishedDate, forKey: "publishedDate")
        options.setValue(author, forKey: "author")
        
        do {
            try shared.context.save()
        } catch let error {
            print("Problem occourred while saving")
            print("\n \(error) \n")
        }
    }
    
    func loadAllBooks() -> Array<Book> {
        
        let request: NSFetchRequest<Book> = NSFetchRequest(entityName: "Book")
        request.returnsObjectsAsFaults = false
        
        let books = self.loadBooksFromFetchRequest(request: request)   
        
        return books
    }
    
    private func loadBooksFromFetchRequest(request: NSFetchRequest<Book>) -> [Book] {
        var array = [Book]()
        do {
            array = try self.context.fetch(request)
            
            guard array.count > 0 else {print("No elements to read"); return []}
            
        } catch let error {
        	print(error)    
        }
        
        return array
    }
    
    func loadBook(isbn: String) -> Book {
        let request: NSFetchRequest<Book> = NSFetchRequest(entityName: "Book")
        request.returnsObjectsAsFaults = false
        
        let predicate = NSPredicate(format: "ISBN = %@", isbn)
        request.predicate = predicate
        
        let books = self.loadBooksFromFetchRequest(request: request)
        return books[0]
    }
    
    func deleteBook(isbn: String) {
        let book = self.loadBook(isbn: isbn)
        self.context.delete(book)
        
        do {
            try self.context.save()
        } catch let error {
            print(error)
        }
    }
    class func saveShelf(
name: String, 
bookCount: Int32
) {
        
        // retrieve entity
        let entity = NSEntityDescription.entity(forEntityName: "Shelf", in: shared.context)
        
        // setting attributes
        let options = NSManagedObject(entity: entity!, insertInto: shared.context)
        options.setValue(name, forKey: "name")
        options.setValue(bookCount, forKey: "bookCount")
        
        do {
            try shared.context.save()
        } catch let error {
            print("Problem occourred while saving")
            print("\n \(error) \n")
        }
    }
    
    func loadAllShelfs() -> Array<Shelf> {
        
        let request: NSFetchRequest<Shelf> = NSFetchRequest(entityName: "Shelf")
        request.returnsObjectsAsFaults = false
        
        let shelfs = self.loadShelfsFromFetchRequest(request: request)   
        
        return shelfs
    }
    
    private func loadShelfsFromFetchRequest(request: NSFetchRequest<Shelf>) -> [Shelf] {
        var array = [Shelf]()
        do {
            array = try self.context.fetch(request)
            
            guard array.count > 0 else {print("No elements to read"); return []}
            
        } catch let error {
        	print(error)    
        }
        
        return array
    }
    
    func loadShelf(name: String) -> Shelf {
        let request: NSFetchRequest<Shelf> = NSFetchRequest(entityName: "Shelf")
        request.returnsObjectsAsFaults = false
        
        let predicate = NSPredicate(format: "name = %@", name)
        request.predicate = predicate
        
        let shelfs = self.loadShelfsFromFetchRequest(request: request)
        return shelfs[0]
    }
    
    func deleteShelf(name: String) {
        let shelf = self.loadShelf(name: name)
        self.context.delete(shelf)
        
        do {
            try self.context.save()
        } catch let error {
            print(error)
        }
    }
}
