«REM»
Copyright 2016 Gregorio Perego, Stefania Pezzetti, Aldo Pintus
This file is part of it.polimi.mobilecodegenerator.

it.polimi.mobilecodegenerator is free software: 
you can redistribute it and/or modify it under the terms of the 
GNU General Public License as published by the Free Software Foundation, 
either version 3 of the License, or (at your option) any later version.

it.polimi.mobilecodegenerator is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
See the GNU General Public License for more details.You should have received a copy of the GNU General Public License
along with it.polimi.mobilecodegenerator. If not, see <http://www.gnu.org/licenses/>
«ENDREM»

«IMPORT metamodel»

«DEFINE propertiesDeclarations FOR ViewController-»
«FOREACH gridViews AS gv-»
	@IBOutlet weak var «gv.id»: UICollectionView!

«IF gv.gridType.matches("detailed") || gv.gridType.matches("simple") -»
	var «gv.id»Contents: [String] = [
		«IF gv.gridViewCells.size!=0-»
		// Change the text for each cell here
		«FOREACH gv.gridViewCells AS gvc-»
		"«gvc.title»",
		«ENDFOREACH-»
		«ENDIF-»
	]
«ENDIF-»

«IF gv.gridType.matches("detailed") || gv.gridType.matches("image") -»
	var «gv.id»Images: [UIImage] = [
		«IF gv.gridViewCells.size!=0-»
		// Change the images for each cell here
		«FOREACH gv.gridViewCells AS gvc-»
		UIImage(named: "grid_image")!,
		«ENDFOREACH-»
		«ENDIF-»
	]
«ENDIF-»

«ENDFOREACH-»
«ENDDEFINE-»

«DEFINE viewDidLoad FOR ViewController-»
«FOREACH gridViews AS gv-»
		self.«gv.id».delegate = self
		self.«gv.id».dataSource = self
«ENDFOREACH»
«ENDDEFINE-»

«DEFINE gridViews FOR ViewController-»
«IF gridViews.size!=0-»
	func numberOfSectionsInCollectionView(collectionView: UICollectionView) -> Int {
	    return 1
	}

	func collectionView(collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
	    «FOREACH gridViews AS gv-»
	    if collectionView == self.«gv.id» {
	    	«IF gv.gridType.matches("image")-»
	        return self.«gv.id»Images.count
	        «ELSE-»
	        return self.«gv.id»Contents.count
	        «ENDIF-»
	    }
	    «ENDFOREACH-»
	    
	    return 0
	}

	func collectionView(collectionView: UICollectionView, cellForItemAtIndexPath indexPath: NSIndexPath) -> UICollectionViewCell {
		// Configure the cell...
	    «FOREACH gridViews AS gv-»
	    «IF gv.gridType.matches("detailed")-»
	    if collectionView == self.«gv.id» {
	        let «gv.id»CollectionViewCell = collectionView.dequeueReusableCellWithReuseIdentifier("«gv.id»CollectionViewCell", forIndexPath: indexPath) as! DetailedCollectionViewCell
	        «gv.id»CollectionViewCell.label.text = «gv.id»Contents[indexPath.row]
	        «gv.id»CollectionViewCell.img.image = «gv.id»Images[indexPath.row]
	        return «gv.id»CollectionViewCell
	    }
	    «ELSEIF gv.gridType.matches("image")-»
	    if collectionView == self.«gv.id» {
	        let «gv.id»CollectionViewCell = collectionView.dequeueReusableCellWithReuseIdentifier("«gv.id»CollectionViewCell", forIndexPath: indexPath) as! ImageCollectionViewCell
	        «gv.id»CollectionViewCell.img.image = «gv.id»Images[indexPath.row]
	        return «gv.id»CollectionViewCell
	    }
	    «ELSEIF gv.gridType.matches("simple")-»
	    if collectionView == self.«gv.id» {
	        let «gv.id»CollectionViewCell = collectionView.dequeueReusableCellWithReuseIdentifier("«gv.id»CollectionViewCell", forIndexPath: indexPath) as! SimpleCollectionViewCell
	        «gv.id»CollectionViewCell.label.text = «gv.id»Contents[indexPath.row]
	        return «gv.id»CollectionViewCell
	    }
	    «ENDIF-»
	    «ENDFOREACH-»
	    
		return UICollectionViewCell()
	}

	//Force the dimensions of the cells to half screen width
	func collectionView(collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAtIndexPath: NSIndexPath) -> CGSize {
	    let dim = (collectionView.bounds.width / 2.0) - 2.5 //2.5 is half cell spacing
	    return CGSize(width: dim, height: dim)
	}
	
	//Invalidate layout when rotating device to re-calculate the dimensions of the cells
	override func willRotateToInterfaceOrientation(toInterfaceOrientation: UIInterfaceOrientation, duration: NSTimeInterval) {
	    «FOREACH gridViews AS gv-»
	    self.«gv.id».collectionViewLayout.invalidateLayout()
	    «ENDFOREACH-»
	}

	func collectionView(collectionView: UICollectionView, didDeselectItemAtIndexPath indexPath: NSIndexPath) {
		«FOREACH gridViews AS gv-»
		«IF gv.clickListener!=null-»
	    if collectionView == self.«gv.id» {
	        «IF gv.clickListener.navigation==null-»
			//TODO implement the action
			«ENDIF-»
	    }
	    «ENDIF-»
	    «ENDFOREACH-»
	    collectionView.deselectItemAtIndexPath(indexPath, animated: true)
	}
«ENDIF-»
«ENDDEFINE-»

«DEFINE prepareForSegue FOR ViewController-»
	«FOREACH gridViews AS gv-»
		«IF gv.clickListener != null && gv.clickListener.navigation != null-»
		//You can reference to the next ViewController and the selected UICollectionViewCell     
		if segue.identifier == "SegueIdentifierFrom«gv.id»To«gv.clickListener.navigation.destination»ViewControllerID" {
 	        let index = self.«gv.id».indexPathsForSelectedItems()
			let destination = segue.destinationViewController as! «gv.clickListener.navigation.destination»ViewController
            // Pass the selected cell content to destination ...
		}
		«ENDIF-»
	«ENDFOREACH-»
«ENDDEFINE-»