«REM»
Copyright 2017 Alessio Rossotti
This file is part of it.polimi.mobilecodegenerator.

it.polimi.mobilecodegenerator is free software: 
you can redistribute it and/or modify it under the terms of the 
GNU General Public License as published by the Free Software Foundation, 
either version 3 of the License, or (at your option) any later version.

it.polimi.mobilecodegenerator is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
See the GNU General Public License for more details.You should have received a copy of the GNU General Public License
along with it.polimi.mobilecodegenerator. If not, see <http://www.gnu.org/licenses/>
«ENDREM»

«IMPORT metamodel»

«DEFINE main FOR Application-»
«EXPAND preference FOR dataHandler.preferenceHandler-»
«ENDDEFINE-»

«DEFINE preference FOR PreferenceHandler-»
«FILE dataHandler.application.name+"/mobile/src/main/java/"+dataHandler.application.companyIdentifier.replaceAll("\\.","/") + "/"+dataHandler.application.name.toLowerCase()+"/data/PreferenceHandler.java"-»
package «dataHandler.application.companyIdentifier».«dataHandler.application.name.toLowerCase()».data;

import android.content.Context;
import android.content.SharedPreferences;
import it.polimi.«dataHandler.application.name.toLowerCase()».R;

public class PreferenceHandler{
	
	private SharedPreferences sp;
	private SharedPreferences.Editor editor;
	private String PREFERENCE_NAME = "default";
	private Context context; 
	
	public PreferenceHandler(Context context){
		SharedPreferences sharedPref = context.getSharedPreferences(PREFERENCE_NAME, Context.MODE_PRIVATE);
		this.context = context;
		this.sp = sharedPref;
	}
	
	«EXPAND record FOREACH preferenceRecords-»	
}	
«ENDFILE-»
«ENDDEFINE-»

«REM» define get, set and reset methods for each record «ENDREM»
«DEFINE record FOR PreferenceRecord-»
«IF type.matches('int')-»
public int get«key.toFirstUpper()»(){
	
	int defaultValue = Integer.parseInt(context.getResources().getString(R.string.«key»_default));
	return sp.getInt(context.getResources().getString(R.string.«key»), defaultValue);
}

public void set«key.toFirstUpper()»(int value){
	
	editor = sp.edit();
	editor.putInt(context.getResources().getString(R.string.«key»), value);
	editor.apply();
}

public void reset«key.toFirstUpper()»(){
	
	editor = sp.edit();
	int defaultValue = Integer.parseInt(context.getResources().getString(R.string.«key»_default));
	editor.putInt(context.getResources().getString(R.string.«key»), defaultValue);
	editor.apply();
}
«ENDIF-»
«IF type.matches('long')-»
public long get«key.toFirstUpper()»(){
	
	long defaultValue = Long.parseLong(context.getResources().getString(R.string.«key»_default));
	return sp.getLong(context.getResources()getString(R.string.«key»), defaultValue);
}

public void set«key.toFirstUpper()»(long value){
	
	editor = sp.edit();
	editor.putLong(context.getResources().getString(R.string.«key»), value);
	editor.apply();
}

public void reset«key.toFirstUpper()»(){
	
	editor = sp.edit();
	long defaultValue = Long.parseLong(context.getResources().getString(R.string.«key»_default));
	editor.putLong(context.getResources().getString(R.string.«key»), defaultValue);
	editor.apply();
}
«ENDIF-»
«IF type.matches('string')-»
public String get«key.toFirstUpper()»(){
	
	String defaultValue = context.getResources().getString(R.string.«key»_default);
	return sp.getString(context.getResources().getString(R.string.«key»), defaultValue);
}

public void set«key.toFirstUpper()»(String value){
	
	editor = sp.edit();
	editor.putString(context.getResources().getString(R.string.«key»), value);
	editor.apply();
}

public void reset«key.toFirstUpper()»(){
	
	editor = sp.edit();
	String defaultValue = context.getResources().getString(R.string.«key»_default);
	editor.putString(context.getResources().getString(R.string.«key»), defaultValue);
	editor.apply();
}
«ENDIF-»
«IF type.matches('boolean')-»
public Boolean get«key.toFirstUpper()»(){
	
	Boolean defaultValue = Boolean.valueOf(context.getResources().getString(R.string.«key»_default));
	return sp.getBoolean(context.getResources().getString(R.string.«key»), defaultValue);
}

public void set«key.toFirstUpper()»(Boolean value){
	
	editor = sp.edit();
	editor.putBoolean(context.getResources().getString(R.string.«key»), value);
	editor.apply();
}

public void reset«key.toFirstUpper()»(){
	
	editor = sp.edit();
	Boolean defaultValue = Boolean.valueOf(context.getResources().getString(R.string.«key»_default));
	editor.putBoolean(context.getResources().getString(R.string.«key»), defaultValue);
	editor.apply();
}
«ENDIF-»
«IF type.matches('float') || type.matches('double')-»
public float get«key.toFirstUpper()»(){
	
	float defaultValue = Float.parseFloat(context.getResources().getString(R.string.«key»_default));
	return sp.getFloat(context.getResources().getString(R.string.«key»), defaultValue);
}

public void set«key.toFirstUpper()»(float value){
	
	editor = sp.edit();
	editor.putFloat(context.getResources().getString(R.string.«key»), value);
	editor.apply();
}

public void reset«key.toFirstUpper()»(){
	
	editor = sp.edit();
	float defaultValue = Float.parseFloat(context.getResources().getString(R.string.«key»_default));
	editor.putFloat(context.getResources().getString(R.string.«key»), defaultValue);
	editor.apply();
}
«ENDIF-»

public void delete«key.toFirstUpper()»(){
	
	editor = sp.edit();
	editor.remove(context.getResources().getString(R.string.«key»));
	editor.apply();
}
«ENDDEFINE-»