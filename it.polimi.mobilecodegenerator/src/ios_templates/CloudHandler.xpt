«REM»
Copyright 2017 Alessio Rossotti
This file is part of it.polimi.mobilecodegenerator.

it.polimi.mobilecodegenerator is free software: 
you can redistribute it and/or modify it under the terms of the 
GNU General Public License as published by the Free Software Foundation, 
either version 3 of the License, or (at your option) any later version.

it.polimi.mobilecodegenerator is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
See the GNU General Public License for more details.You should have received a copy of the GNU General Public License
along with it.polimi.mobilecodegenerator. If not, see <http://www.gnu.org/licenses/>
«ENDREM»

«IMPORT metamodel»
«EXTENSION ios_extensions::Java»
«EXTENSION app_extensions::Java»
«DEFINE main FOR Application-»

«IF this.dataHandler.cloudHandler.existsObject()-»
«FILE this.name+"/"+this.name+"/DataHandlers/FirebaseHandler.swift"-»
//
//  FirebaseHandler.swift
//  «this.name-»
//
//  Automatically generated by MobileCodeGenerator 3.
//  Copyright © 2017 «this.companyIdentifier.split(".").last()-». All rights reserved.
//

import FirebaseDatabase

class FirebaseHandler{
	
	func getReference(reference : String) -> DatabaseReference{
	
		return Database.database().reference(withPath: reference)
	}
	
	func getReference() -> DatabaseReference{
	
		return Database.database().reference()
	}
	
	«FOREACH this.dataHandler.cloudHandler.cloudObjects AS cObject-»
	func save«cObject.name.toFirstUpper()-»(«cObject.name.toLowerCase()-» : «cObject.name.toFirstUpper()-» ) -> Void{
		
		// TODO REPLACE WITH YOUR FIREBASE CONSOLE REF
		let ref = getReference(reference: "«cObject.name.toLowerCase()-»")
		
		ref.setValue(«cObject.name.toLowerCase()-»)
	}
	
	func observe«cObject.name.toFirstUpper()-»() -> Void{
		
		// TODO REPLACE WITH YOUR FIREBASE CONSOLE REF
		let ref = getReference(reference: "«cObject.name.toLowerCase()-»")
		
		ref.observe(.value, with: { snapshot in
				
			// TODO REPLACE WITH YOUR ACTION				
			var newItems: [«cObject.name.toFirstUpper()-»] = []
			  
			for item in snapshot.children {
				let  «cObject.name.toLowerCase()-» = «cObject.name.toFirstUpper()-»(snapshot: item as! DataSnapshot)
				newItems.append(«cObject.name.toLowerCase()-»)
			} 
			//self.items = newItems
		})
	}
	
	func delete«cObject.name.toFirstUpper()-»(«cObject.name.toLowerCase()-» : «cObject.name.toFirstUpper()-») -> Void{
		
		// TODO REPLACE WITH THE ID IN YOUR FIREBASE CONSOLE
		getReference(reference: "«cObject.name.toLowerCase()-».ID").removeValue()		
	}
	«ENDFOREACH-»
	            
}
«ENDFILE-»

«FILE this.name+"/"+this.name+"/DataHandlers/CloudHandler.swift"-»
//
//  CloudHandler.swift
//  «this.name-»
//
//  Automatically generated by MobileCodeGenerator 3.
//  Copyright © 2017 «this.companyIdentifier.split(".").last()-». All rights reserved.
//

import CloudKit

class CloudHandler{
	
	let container: CKContainer
	let publicDB: CKDatabase
	let privateDB: CKDatabase
	
	init() {
		
		container = CKContainer.default()
		publicDB = container.publicCloudDatabase
		privateDB = container.privateCloudDatabase
	    
	}
	
	«FOREACH this.dataHandler.cloudHandler.cloudObjects AS cObject-»
	func save«cObject.name.toFirstUpper()-»(«cObject.name.toLowerCase()-» : CKRecord ) -> Void{
		
		publicDB.save(«cObject.name.toLowerCase()-») {
		    (record, error) in
		    if let error = error {
		        // Insert error handling
                print("error setting up record \(error)")
		        return
		    }
		    // Insert successfully saved record code
		}
	}
	
	func query«cObject.name.toFirstUpper()-»(«cObject.objectAttributes.first().name.toLowerCase()-» : «cObject.objectAttributes.first().type.toFirstUpper()-» ) -> Void{
		
		let predicate = NSPredicate(format: "«cObject.objectAttributes.first().name-» == %@", «cObject.objectAttributes.first().name.toLowerCase()-»)
        let query = CKQuery(recordType: "«cObject.name.toFirstUpper()-»", predicate: predicate)
		
	    publicDB.perform(query, inZoneWith: nil) { (results, error) in
	      
	      if (error != nil) {
		        // Error handling for failed fetch from public database
		        print("error fetching record \(String(describing: error))")
		    }
		    else {
		        // Display the fetched records
		        
		    }
	    }	
	}
	
	func delete«cObject.name.toFirstUpper()-»(recordID : CKRecordID ) -> Void{
		
		publicDB.delete(withRecordID: recordID, completionHandler: {(recordID, error) in
            
            if error == nil {
                
                //Record deleted   
            }
        })
	}
	«ENDFOREACH-»
	
}
«ENDFILE-»
«FOREACH this.dataHandler.cloudHandler.cloudObjects AS cObject-»
«FILE cObject.cloudHandler.dataHandler.application.name+"/"+cObject.cloudHandler.dataHandler.application.name+"/CloudObjects/"+cObject.name+".swift"-»
//
//  «cObject.name-».swift
//  «cObject.cloudHandler.dataHandler.application.name-»
//
//  Automatically generated by MobileCodeGenerator 3.
//  Copyright © 2017 «this.companyIdentifier.split(".").last()-». All rights reserved.
//

import FirebaseDatabase
import CloudKit

class «cObject.name.toFirstUpper()-» : NSObject{
	
	«FOREACH cObject.objectAttributes AS attribute-»
	var «attribute.name-» : «attribute.type-»
	
	«ENDFOREACH-»
	weak var ref : DatabaseReference?
	var record: CKRecord!
	weak var database: CKDatabase!

	init(«EXPAND attributeInit FOR cObject.objectAttributes-») {
	  	«FOREACH cObject.objectAttributes AS attribute-»
	  	self.«attribute.name-» = «attribute.name-»
	  	
		«ENDFOREACH-»
		self.ref = FirebaseHandler().getReference()
	}	   
	
	// Firebase initialization
	init(snapshot: DataSnapshot) {
	
		let snapshotValue = snapshot.value as! [String: AnyObject]
		«FOREACH cObject.objectAttributes AS attribute-»
	  	self.«attribute.name-» = snapshotValue["«attribute.name-»"] as! «attribute.type-»
	 
		«ENDFOREACH-»
		self.ref = snapshot.ref
  	}
  	
  	// iCloud initialization
  	init(record: CKRecord, database: CKDatabase) {
  		
  		self.record = record
	    self.database = database
	
	    «FOREACH cObject.objectAttributes AS attribute-»
	  	self.«attribute.name-» = record["«attribute.name-»"] as! «attribute.type-»
	 
		«ENDFOREACH-»
	  
	}
  
	func toAnyObject() -> Any {
		return [
			«FOREACH cObject.objectAttributes.withoutLast() AS attribute-»
		  	"«attribute.name-»": «attribute.name-»,
			«ENDFOREACH-»
			"«cObject.objectAttributes.last().name-»": «cObject.objectAttributes.last().name-»
			
		]
	}         
}
«ENDFILE-»
«ENDFOREACH-»
«ENDIF-»
«ENDDEFINE-»

«DEFINE attributeInit FOR List[ObjectAttribute]-»
«FOREACH this.withoutLast() AS attribute-»
«attribute.name-» : «attribute.type-»,
«ENDFOREACH-»
«this.last().name-» : «this.last().type-»
«ENDDEFINE-»