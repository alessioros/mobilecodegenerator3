«REM»
Copyright 2017 Alessio Rossotti
This file is part of it.polimi.mobilecodegenerator.

it.polimi.mobilecodegenerator is free software: 
you can redistribute it and/or modify it under the terms of the 
GNU General Public License as published by the Free Software Foundation, 
either version 3 of the License, or (at your option) any later version.

it.polimi.mobilecodegenerator is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
See the GNU General Public License for more details.You should have received a copy of the GNU General Public License
along with it.polimi.mobilecodegenerator. If not, see <http://www.gnu.org/licenses/>
«ENDREM»

«IMPORT metamodel»
«EXTENSION ios_extensions::Java»
«EXTENSION app_extensions::Java»
«DEFINE main FOR Application-»

«IF this.dataHandler.storageHandler.existsObject()-»
«REM» Core data model«ENDREM»
«FILE this.name+"/"+this.name+"/DataHandlers/StorageHandler.swift"-»
//
//  StorageHandler.swift
//  «this.name-»
//
//  Automatically generated by MobileCodeGenerator 3.
//  Copyright © 2017 «this.companyIdentifier.split(".").last()-». All rights reserved.
//

import Foundation

class StorageHandler{
	
	«FOREACH this.dataHandler.storageHandler.storageRecords AS record-»
	let «record.name.replaceAll(".","")-»FileName = "«record.name-»";
	«ENDFOREACH-»

	func readFile(file : String) -> String{
		
		if let dir = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first {
	    	let path = dir.appendingPathComponent(file)
	    	
			var text = "";
		    do {
		         text = try String(contentsOf: path, encoding: String.Encoding.utf8)
		    }
		    catch {/* error handling here */}  
		    
		    return text;
		}else{ return ""; }  
	}  
	
	func writeFile(file : String, content : String) -> Bool{
		
		if let dir = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first {
	    	
	    	let path = dir.appendingPathComponent(file)
		    do {
		        try content.write(to: path, atomically: false, encoding: String.Encoding.utf8)
		    }
		    catch {
		    	return false
		    }
		    return true;
		    
		}else{ return false; }  
	}             
}
«ENDFILE-»
«ENDIF-»
«ENDDEFINE-»