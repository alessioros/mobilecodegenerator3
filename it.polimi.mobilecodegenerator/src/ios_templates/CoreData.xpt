«REM»
Copyright 2017 Alessio Rossotti
This file is part of it.polimi.mobilecodegenerator.

it.polimi.mobilecodegenerator is free software: 
you can redistribute it and/or modify it under the terms of the 
GNU General Public License as published by the Free Software Foundation, 
either version 3 of the License, or (at your option) any later version.

it.polimi.mobilecodegenerator is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
See the GNU General Public License for more details.You should have received a copy of the GNU General Public License
along with it.polimi.mobilecodegenerator. If not, see <http://www.gnu.org/licenses/>
«ENDREM»

«IMPORT metamodel»
«EXTENSION ios_extensions::Java»
«EXTENSION app_extensions::Java»
«DEFINE main FOR Application-»

«IF this.dataHandler.databaseHandler.existsObject()-»
«REM» Core data model«ENDREM»
«FILE name+"/"+name+"/"+name+".xcdatamodeld"+"/"+name+".xcdatamodel"+"/contents"-»
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<model type="com.apple.IDECoreDataModeler.DataModel" documentVersion="1.0" lastSavedToolsVersion="12141" systemVersion="16E195" minimumToolsVersion="Automatic" sourceLanguage="Swift" userDefinedModelVersionIdentifier="">
«FOREACH this.dataHandler.databaseHandler.entities AS entity-»
<entity name="«entity.name-»" representedClassName="«entity.name-»" syncable="YES" codeGenerationType="none">
	«IF entity.primaryKey.matches("description") || entity.primaryKey.matches("entity") || entity.primaryKey.matches("objectID")-»
	<attribute name="«entity.primaryKey-»_" optional="NO" attributeType="String" syncable="YES"/>
	«ELSE-»
	<attribute name="«entity.primaryKey-»" optional="NO" attributeType="String" syncable="YES"/>
	«ENDIF-»
	«FOREACH entity.entityAttributes AS attribute-»
	«IF attribute.name.matches("description") || attribute.name.matches("entity") || attribute.name.matches("objectID")-»
	«IF attribute.type.matches("String") || attribute.type.matches("Date")-»
	<attribute name="«attribute.name-»_" optional="YES" attributeType="«attribute.type»" syncable="YES"/>
	«ENDIF-»
	«IF attribute.type.matches("Integer")-»
	<attribute name="«attribute.name-»_" optional="YES" attributeType="Integer 32" syncable="YES"/>
	«ENDIF-»
	«IF attribute.type.matches("Float") || attribute.type.matches("Double")-»
	<attribute name="«attribute.name-»_" optional="YES" attributeType="«attribute.type»" defaultValueString="0.0" usesScalarValueType="YES" syncable="YES"/>
	«ENDIF-»
	«IF attribute.type.matches("Boolean")-»
	<attribute name="«attribute.name-»_" optional="YES" attributeType="«attribute.type»" usesScalarValueType="YES" syncable="YES"/>
	«ENDIF-»
	«ELSE-»
	«IF attribute.type.matches("String") || attribute.type.matches("Date")-»
	<attribute name="«attribute.name-»" optional="YES" attributeType="«attribute.type»" syncable="YES"/>
	«ENDIF-»
	«IF attribute.type.matches("Integer")-»
	<attribute name="«attribute.name-»" optional="YES" attributeType="Integer 32" syncable="YES"/>
	«ENDIF-»
	«IF attribute.type.matches("Float") || attribute.type.matches("Double")-»
	<attribute name="«attribute.name-»" optional="YES" attributeType="«attribute.type»" defaultValueString="0.0" usesScalarValueType="YES" syncable="YES"/>
	«ENDIF-»
	«IF attribute.type.matches("Boolean")-»
	<attribute name="«attribute.name-»" optional="YES" attributeType="«attribute.type»" usesScalarValueType="YES" syncable="YES"/>
	«ENDIF-»
	«ENDIF-»
    «ENDFOREACH-»
    «FOREACH entity.entityRelationships AS relationship-»
    <relationship name="«relationship.name-»" optional="YES" maxCount="1" deletionRule="Nullify" destinationEntity="«relationship.destination-»" syncable="YES"/>
    «ENDFOREACH-»
</entity>
«ENDFOREACH-»
<elements/>
</model>
«ENDFILE-»

«REM» Core data model version «ENDREM»
«FILE name+"/"+name+"/"+name+".xcdatamodeld"+"/.xccurrentversion"-»
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>_XCCurrentVersionName</key>
	<string>«this.name-».xcdatamodel</string>
</dict>
</plist>
«ENDFILE-»

«REM» DatabaseHandler class «ENDREM»
«FILE this.name+"/"+this.name+"/DataHandlers/DatabaseHandler.swift"-»
//
//  DatabaseHandler.swift
//  «this.name-»
//
//  Automatically generated by MobileCodeGenerator 3.
//  Copyright © 2017 «this.companyIdentifier.split(".").last()-». All rights reserved.
//

import Foundation
import CoreData
import UIKit

class DatabaseHandler{
    
    static let shared = DatabaseHandler()
    private var context: NSManagedObjectContext
    
    init(){
        let application = UIApplication.shared.delegate as! AppDelegate
        self.context = application.persistentContainer.viewContext
    }
    
    «FOREACH this.dataHandler.databaseHandler.entities AS EN-»
    class func save«EN.name.toFirstUpper()-»(«EXPAND enAttributes FOR EN-») {
        
        // retrieve entity
        let entity = NSEntityDescription.entity(forEntityName: "«EN.name.toFirstUpper()-»", in: shared.context)
        
        // setting attributes
        let options = NSManagedObject(entity: entity!, insertInto: shared.context)
        «IF EN.primaryKey.matches("description") || EN.primaryKey.matches("entity") || EN.primaryKey.matches("objectID")-»
        options.setValue(«EN.primaryKey-»_, forKey: "«EN.primaryKey-»_")
        «ELSE-»
        options.setValue(«EN.primaryKey-», forKey: "«EN.primaryKey-»")
        «ENDIF-»
        «FOREACH EN.entityAttributes AS ATT-»
        «IF ATT.name.matches("description") || ATT.name.matches("entity") || ATT.name.matches("objectID")-»
        options.setValue(«ATT.name-»_, forKey: "«ATT.name-»_")
        «ELSE-»
        options.setValue(«ATT.name-», forKey: "«ATT.name-»")
        «ENDIF-»
        «ENDFOREACH-»
        
        do {
            try shared.context.save()
        } catch let error {
            print("Problem occourred while saving")
            print("\n \(error) \n")
        }
    }
    
    func loadAll«EN.name.toFirstUpper()-»s() -> Array<«EN.name.toFirstUpper()-»> {
        
        let request: NSFetchRequest<«EN.name.toFirstUpper()-»> = NSFetchRequest(entityName: "«EN.name.toFirstUpper()-»")
        request.returnsObjectsAsFaults = false
        
        let «EN.name.toLowerCase()-»s = self.load«EN.name.toFirstUpper()-»sFromFetchRequest(request: request)   
        
        return «EN.name.toLowerCase()-»s
    }
    
    private func load«EN.name.toFirstUpper()-»sFromFetchRequest(request: NSFetchRequest<«EN.name.toFirstUpper()-»>) -> [«EN.name.toFirstUpper()-»] {
        var array = [«EN.name.toFirstUpper()-»]()
        do {
            array = try self.context.fetch(request)
            
            guard array.count > 0 else {print("No elements to read"); return []}
            
        } catch let error {
        	print(error)    
        }
        
        return array
    }
    
    func load«EN.name.toFirstUpper()-»(«EN.primaryKey.toLowerCase()-»: String) -> «EN.name.toFirstUpper()-» {
        let request: NSFetchRequest<«EN.name.toFirstUpper()-»> = NSFetchRequest(entityName: "«EN.name.toFirstUpper()-»")
        request.returnsObjectsAsFaults = false
        
        let predicate = NSPredicate(format: "«EN.primaryKey-» = %@", «EN.primaryKey.toLowerCase()-»)
        request.predicate = predicate
        
        let «EN.name.toLowerCase()-»s = self.load«EN.name.toFirstUpper()-»sFromFetchRequest(request: request)
        return «EN.name.toLowerCase()-»s[0]
    }
    
    func delete«EN.name.toFirstUpper()-»(«EN.primaryKey.toLowerCase()-»: String) {
        let «EN.name.toLowerCase()-» = self.load«EN.name.toFirstUpper()-»(«EN.primaryKey.toLowerCase()-»: «EN.primaryKey.toLowerCase()-»)
        self.context.delete(«EN.name.toLowerCase()-»)
        
        do {
            try self.context.save()
        } catch let error {
            print(error)
        }
    }
    «ENDFOREACH-»
}
«ENDFILE-»

«FOREACH this.dataHandler.databaseHandler.entities AS entity-»
«REM» DatabaseHandler Model classes «ENDREM»
«FILE entity.databaseHandler.dataHandler.application.name+"/"+entity.databaseHandler.dataHandler.application.name+"/CoreDataModels/"+entity.name+"+CoreDataClass.swift"-»
//
//  «entity.name.toFirstUpper()-»+CoreDataClass.swift
//  «entity.databaseHandler.dataHandler.application.name-»
//
//
//  Automatically generated by MobileCodeGenerator 3.
//  Copyright © 2017 «this.companyIdentifier.split('.').last()-». All rights reserved.
//

import Foundation
import CoreData

@objc(«entity.name.toFirstUpper()-»)
public class «entity.name.toFirstUpper()-»: NSManagedObject {
    
}
«ENDFILE-»

«FILE entity.databaseHandler.dataHandler.application.name+"/"+entity.databaseHandler.dataHandler.application.name+"/CoreDataModels/"+entity.name+"+CoreDataProperties.swift"-»
//
//  «entity.name.toFirstUpper()-»+CoreDataProperties.swift
//  «entity.databaseHandler.dataHandler.application.name-»
//
//
//  Automatically generated by MobileCodeGenerator 3.
//  Copyright © 2017 «this.companyIdentifier.split('.').last()-». All rights reserved.
//

import Foundation
import CoreData

extension «entity.name.toFirstUpper()-»{

	@nonobjc public class func fetchRequest() -> NSFetchRequest<«entity.name.toFirstUpper()-»> {
        return NSFetchRequest<«entity.name.toFirstUpper()-»>(entityName: "«entity.name.toFirstUpper()-»")
    }
    
    «IF entity.primaryKey.matches("description") || entity.primaryKey.matches("entity") || entity.primaryKey.matches("objectID")-»
	@NSManaged public var «entity.primaryKey-»_: String?
	«ELSE-»
	@NSManaged public var «entity.primaryKey-»: String?
	«ENDIF-»
    «FOREACH entity.entityAttributes AS attribute-»
    «IF attribute.name.matches("description") || attribute.name.matches("entity") || attribute.name.matches("objectID")-»
	«IF attribute.type.matches("String")-»
	@NSManaged public var «attribute.name-»_: «attribute.type-»?
	«ENDIF-»
	«IF attribute.type.matches("Date")-»
	@NSManaged public var «attribute.name-»_: NSDate?
	«ENDIF-»
	«IF attribute.type.matches("Integer")-»
	@NSManaged public var «attribute.name-»_: Int32
	«ENDIF-»
	«IF attribute.type.matches("Float") || attribute.type.matches("Double")-»
	@NSManaged public var «attribute.name-»_: «attribute.type-»
	«ENDIF-»
	«IF attribute.type.matches("Boolean")-»
	@NSManaged public var «attribute.name-»_: Bool
	«ENDIF-»
	«ELSE-»
	«IF attribute.type.matches("String")-»
	@NSManaged public var «attribute.name-»: «attribute.type-»?
	«ENDIF-»
	«IF attribute.type.matches("Date")-»
	@NSManaged public var «attribute.name-»: NSDate?
	«ENDIF-»
	«IF attribute.type.matches("Integer")-»
	@NSManaged public var «attribute.name-»: Int32
	«ENDIF-»
	«IF attribute.type.matches("Float") || attribute.type.matches("Double")-»
	@NSManaged public var «attribute.name-»: «attribute.type-»
	«ENDIF-»
	«IF attribute.type.matches("Boolean")-»
	@NSManaged public var «attribute.name-»: Bool
	«ENDIF-»
	«ENDIF-»
    «ENDFOREACH-»
    «FOREACH entity.entityRelationships AS relationship-»
    @NSManaged public var «relationship.name-»: «relationship.destination.toFirstUpper()-»?
    «ENDFOREACH-»
    
}
«ENDFILE-»
«ENDFOREACH-»
«ENDIF-»
«ENDDEFINE-»

«DEFINE enAttributes FOR Entity-»

«IF this.primaryKey.matches("description") || this.primaryKey.matches("entity") || this.primaryKey.matches("objectID")-»
«this.primaryKey-»_: String, 
«ELSE-»
«this.primaryKey-»: String, 
«ENDIF-»
«FOREACH this.entityAttributes.withoutLast() AS attribute-»
«IF attribute.name.matches("description") || attribute.name.matches("entity") || attribute.name.matches("objectID")-»
«IF attribute.type.matches("String")-»
«attribute.name-»_: «attribute.type-»,
«ENDIF-»
«IF attribute.type.matches("Date")-»
«attribute.name-»_: NSDate,
«ENDIF-»
«IF attribute.type.matches("Integer")-»
«attribute.name-»_: Int32,
«ENDIF-»
«IF attribute.type.matches("Float") || attribute.type.matches("Double")-»
«attribute.name-»_: «attribute.type-»,
«ENDIF-»
«IF attribute.type.matches("Boolean")-»
«attribute.name-»_: Bool,
«ENDIF-»
«ELSE-»
«IF attribute.type.matches("String")-»
«attribute.name-»: «attribute.type-»,
«ENDIF-»
«IF attribute.type.matches("Date")-»
«attribute.name-»: NSDate,
«ENDIF-»
«IF attribute.type.matches("Integer")-»
«attribute.name-»: Int32,
«ENDIF-»
«IF attribute.type.matches("Float") || attribute.type.matches("Double")-»
«attribute.name-»: «attribute.type-»,
«ENDIF-»
«IF attribute.type.matches("Boolean")-»
«attribute.name-»: Bool,
«ENDIF-»
«ENDIF-»
«ENDFOREACH-»
«IF this.entityAttributes.last().name.matches("description") || this.entityAttributes.last().name.matches("entity") || this.entityAttributes.last().name.matches("objectID")-»
«IF this.entityAttributes.last().type.matches("String")-»
«this.entityAttributes.last().name-»_: «this.entityAttributes.last().type-»
«ENDIF-»
«IF this.entityAttributes.last().type.matches("Date")-»
«this.entityAttributes.last().name-»_: NSDate
«ENDIF-»
«IF this.entityAttributes.last().type.matches("Integer")-»
«this.entityAttributes.last().name-»_: Int32
«ENDIF-»
«IF this.entityAttributes.last().type.matches("Float") || this.entityAttributes.last().type.matches("Double")-»
«this.entityAttributes.last().name-»_: «this.entityAttributes.last().type-»
«ENDIF-»
«IF this.entityAttributes.last().type.matches("Boolean")-»
«this.entityAttributes.last().name-»_: Bool
«ENDIF-»
«ELSE-»
«IF this.entityAttributes.last().type.matches("String")-»
«this.entityAttributes.last().name-»: «this.entityAttributes.last().type-»
«ENDIF-»
«IF this.entityAttributes.last().type.matches("Date")-»
«this.entityAttributes.last().name-»: NSDate
«ENDIF-»
«IF this.entityAttributes.last().type.matches("Integer")-»
«this.entityAttributes.last().name-»: Int32
«ENDIF-»
«IF this.entityAttributes.last().type.matches("Float") || this.entityAttributes.last().type.matches("Double")-»
«this.entityAttributes.last().name-»: «this.entityAttributes.last().type-»
«ENDIF-»
«IF this.entityAttributes.last().type.matches("Boolean")-»
«this.entityAttributes.last().name-»: Bool
«ENDIF-»
«ENDIF-»
«ENDDEFINE-»
