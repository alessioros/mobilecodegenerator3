«REM»
Copyright 2017 Alessio Rossotti
This file is part of it.polimi.mobilecodegenerator.

it.polimi.mobilecodegenerator is free software: 
you can redistribute it and/or modify it under the terms of the 
GNU General Public License as published by the Free Software Foundation, 
either version 3 of the License, or (at your option) any later version.

it.polimi.mobilecodegenerator is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
See the GNU General Public License for more details.You should have received a copy of the GNU General Public License
along with it.polimi.mobilecodegenerator. If not, see <http://www.gnu.org/licenses/>
«ENDREM»

«IMPORT metamodel»
«EXTENSION ios_extensions::Java»
«EXTENSION app_extensions::Java»
«DEFINE main FOR Application-»

«IF this.dataHandler.databaseHandler.existsObject()-»
«REM» Core data model«ENDREM»
«FILE name+"/"+name+"/"+name+".xcdatamodeld"+"/"+name+".xcdatamodel"+"/contents"-»
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<model type="com.apple.IDECoreDataModeler.DataModel" documentVersion="1.0" lastSavedToolsVersion="12141" systemVersion="16E195" minimumToolsVersion="Automatic" sourceLanguage="Swift" userDefinedModelVersionIdentifier="">
«FOREACH this.dataHandler.databaseHandler.entities AS entity-»
<entity name="«entity.name-»" representedClassName="«entity.name-»" syncable="YES" codeGenerationType="class">
	«FOREACH entity.entityAttributes AS attribute-»
	«IF attribute.name.matches("description") || attribute.name.matches("entity") || attribute.name.matches("objectID")-»
	«IF attribute.type.matches("Integer")-»
	<attribute name="«attribute.name-»_" optional="YES" attributeType="Integer 32" syncable="YES"/>
	«ELSE-»
	<attribute name="«attribute.name-»_" optional="YES" attributeType="«attribute.type-»" syncable="YES"/>
	«ENDIF-»
	«ELSE-»
	«IF attribute.type.matches("Integer")-»
	<attribute name="«attribute.name-»" optional="YES" attributeType="Integer 32" syncable="YES"/>
	«ELSE-»
	<attribute name="«attribute.name-»" optional="YES" attributeType="«attribute.type-»" syncable="YES"/>
	«ENDIF-»
	«ENDIF-»
    «ENDFOREACH-»
    «FOREACH entity.entityRelationships AS relationship-»
    <relationship name="«relationship.name-»" optional="YES" maxCount="1" deletionRule="Nullify" destinationEntity="«relationship.destination-»" syncable="YES"/>
    «ENDFOREACH-»
</entity>
«ENDFOREACH-»
<elements/>
</model>
«ENDFILE-»

«REM» Core data model version «ENDREM»
«FILE name+"/"+name+"/"+name+".xcdatamodeld"+"/.xccurrentversion"-»
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>_XCCurrentVersionName</key>
	<string>«this.name-».xcdatamodel</string>
</dict>
</plist>
«ENDFILE-»

«REM» DatabaseHandler class «ENDREM»
«FILE this.name+"/"+this.name+"/DatabaseHandler.swift"-»
//
//  DatabaseHandler.swift
//  «this.name-»
//
//  Automatically generated by MobileCodeGenerator 3.
//  Copyright © 2017 «this.companyIdentifier.split(".").last()-». All rights reserved.
//

import Foundation
import CoreData

class DatabaseHandler{
    
    private init(){
        
    }
    
    class func getContext() -> NSManagedObjectContext {
        return DatabaseHandler.persistentContainer.viewContext
    }
    
    // MARK: - Core Data stack
    
    static var persistentContainer: NSPersistentContainer = {
        /*
         The persistent container for the application. This implementation
         creates and returns a container, having loaded the store for the
         application to it. This property is optional since there are legitimate
         error conditions that could cause the creation of the store to fail.
         */
        let container = NSPersistentContainer(name: "«this.name-»")
        container.loadPersistentStores(completionHandler: { (storeDescription, error) in
            if let error = error as NSError? {
                // Replace this implementation with code to handle the error appropriately.
                // fatalError() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development.
                
                /*
                 Typical reasons for an error here include:
                 * The parent directory does not exist, cannot be created, or disallows writing.
                 * The persistent store is not accessible, due to permissions or data protection when the device is locked.
                 * The device is out of space.
                 * The store could not be migrated to the current model version.
                 Check the error message to determine what the actual problem was.
                 */
                fatalError("Unresolved error \(error), \(error.userInfo)")
            }
        })
        return container
    }()
    
    // MARK: - Core Data Saving support
    
    class func saveContext () {
        let context = persistentContainer.viewContext
        if context.hasChanges {
            do {
                try context.save()
            } catch {
                // Replace this implementation with code to handle the error appropriately.
                // fatalError() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development.
                let nserror = error as NSError
                fatalError("Unresolved error \(nserror), \(nserror.userInfo)")
            }
        }
    }
}
«ENDFILE-»

«FOREACH this.dataHandler.databaseHandler.entities AS entity-»
«REM» DatabaseHandler Model classes «ENDREM»
«FILE entity.databaseHandler.dataHandler.application.name+"/"+entity.databaseHandler.dataHandler.application.name+"/CoreDataModels/"+entity.name+".swift"-»
//
//  «entity.name.toFirstUpper()-».swift
//  «entity.databaseHandler.dataHandler.application.name-»
//
//  Automatically generated by MobileCodeGenerator 3.
//  Copyright © 2017 «this.companyIdentifier.split('.').last()-». All rights reserved.
//

import Foundation
import CoreData

@objc(«entity.name.toFirstUpper()-»)
public class «entity.name.toFirstUpper()-»: NSManagedObject {
    
    @nonobjc public class func fetchRequest() -> NSFetchRequest<«entity.name.toFirstUpper()-»> {
        return NSFetchRequest<«entity.name.toFirstUpper()-»>(entityName: "«entity.name.toFirstUpper()-»")
    }
    
    «FOREACH entity.entityAttributes AS attribute-»
    «IF attribute.name.matches("description") || attribute.name.matches("entity") || attribute.name.matches("objectID")-»
	«IF attribute.type.matches("String")-»
    @NSManaged public var «attribute.name-»_: «attribute.type-»?
    «ENDIF-»
    «IF attribute.type.matches("Integer")-»
    @NSManaged public var «attribute.name-»_: Int32
    «ENDIF-»
    «IF attribute.type.matches("Date")-»
    @NSManaged public var «attribute.name-»_: NSDate?
    «ENDIF-»
	«ELSE-»
    «IF attribute.type.matches("String")-»
    @NSManaged public var «attribute.name-»: «attribute.type-»?
    «ENDIF-»
    «IF attribute.type.matches("Integer")-»
    @NSManaged public var «attribute.name-»: Int32
    «ENDIF-»
    «IF attribute.type.matches("Date")-»
    @NSManaged public var «attribute.name-»: NSDate?
    «ENDIF-»
    «ENDIF-»
    «ENDFOREACH-»
    
    «FOREACH entity.entityRelationships AS relationship-»
    @NSManaged public var «relationship.name-»: «relationship.destination.toFirstUpper()-»?
    «ENDFOREACH-»
}
«ENDFILE-»
«ENDFOREACH-»
«ENDIF-»
«ENDDEFINE-»