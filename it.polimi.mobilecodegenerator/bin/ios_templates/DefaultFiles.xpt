«REM»
Copyright 2017 Gregorio Perego, Stefania Pezzetti, Aldo Pintus, Alessio Rossotti
This file is part of it.polimi.mobilecodegenerator.

it.polimi.mobilecodegenerator is free software: 
you can redistribute it and/or modify it under the terms of the 
GNU General Public License as published by the Free Software Foundation, 
either version 3 of the License, or (at your option) any later version.

it.polimi.mobilecodegenerator is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
See the GNU General Public License for more details.You should have received a copy of the GNU General Public License
along with it.polimi.mobilecodegenerator. If not, see <http://www.gnu.org/licenses/>
«ENDREM»

«IMPORT metamodel»
«EXTENSION app_extensions::Java»
«EXTENSION ios_extensions::Java»
«DEFINE main FOR Application-»

«setApplicationName(name)»
«deleteApplicationFolder()»
«copyDefaultIOSFiles()»
«copyUserFiles()»

«FILE this.name +"/"+this.name +"/"+ "AppDelegate.swift"-»
import UIKit
«IF this.dataHandler.databaseHandler.existsObject() -»
import CoreData
«ENDIF-»
«IF existsAtLeastOne(watchControllers.watchVoiceMessage) -»
import WatchConnectivity
«ENDIF-»

@UIApplicationMain
class AppDelegate: UIResponder, UIApplicationDelegate«IF existsAtLeastOne(watchControllers.watchVoiceMessage) -», WCSessionDelegate«ENDIF-» {

    var window: UIWindow?

	«IF existsAtLeastOne(watchControllers.watchVoiceMessage) -»
	var session: WCSession?
    var receivedMessages : [String : String] = [:]
	
	func session(_ session: WCSession, didReceiveMessage message: [String : Any], replyHandler: @escaping ([String : Any]) -> Void) {
        
        //the message contains only a single pair [key:value]
        //this loop is used to get a reference to that pair
        for (key,value) in message {
            
            //get message content
            let messageContent = value as! String
            
            //check if key exists and eventually update it
            var tmpKey = key
            var keyExists = receivedMessages[tmpKey] != nil
            var i = 1
            while(keyExists) {
                tmpKey = key + "_\(i)"
                keyExists = receivedMessages[tmpKey] != nil
                i += 1
            }
            
            //store the pair [tmpKey:messageContent]
            receivedMessages[tmpKey] = messageContent
            
            //you can reference to this messages from any viewcontroller like this
            //let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate
            //let receivedMessages = appDelegate.receivedMessages
            //let numMessages = receivedMessages.count
            //if let lastMessage = receivedMessages.values.first {}
            
        }
        
	}
	«ENDIF-»

    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -> Bool {
        // Override point for customization after application launch.
        «IF existsAtLeastOne(watchControllers.watchVoiceMessage) -»
        if (WCSession.isSupported()) {
            self.session = WCSession.defaultSession()
            self.session!.delegate = self;
            self.session!.activate()
            print("WCSession activated")
        } else {
            print("WCSession is not supported")
        }
        «ENDIF-»
        return true
    }

    func applicationWillResignActive(_ application: UIApplication) {
        // Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.
        // Use this method to pause ongoing tasks, disable timers, and throttle down OpenGL ES frame rates. Games should use this method to pause the game.
    }

    func applicationDidEnterBackground(_ application: UIApplication) {
        // Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later.
        // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits.
    }

    func applicationWillEnterForeground(_ application: UIApplication) {
        // Called as part of the transition from the background to the inactive state; here you can undo many of the changes made on entering the background.
    }

    func applicationDidBecomeActive(_ application: UIApplication) {
        // Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface.
    }

    func applicationWillTerminate(_ application: UIApplication) {
        // Called when the application is about to terminate. Save data if appropriate. See also applicationDidEnterBackground:.
    }
    
    «IF dataHandler.databaseHandler.existsObject() -»
    // MARK: - Core Data stack

    lazy var persistentContainer: NSPersistentContainer = {
        /*
         The persistent container for the application. This implementation
         creates and returns a container, having loaded the store for the
         application to it. This property is optional since there are legitimate
         error conditions that could cause the creation of the store to fail.
        */
        let container = NSPersistentContainer(name: "«this.name-»")
        container.loadPersistentStores(completionHandler: { (storeDescription, error) in
            if let error = error as NSError? {
                // Replace this implementation with code to handle the error appropriately.
                // fatalError() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development.
                 
                /*
                 Typical reasons for an error here include:
                 * The parent directory does not exist, cannot be created, or disallows writing.
                 * The persistent store is not accessible, due to permissions or data protection when the device is locked.
                 * The device is out of space.
                 * The store could not be migrated to the current model version.
                 Check the error message to determine what the actual problem was.
                 */
                fatalError("Unresolved error \(error), \(error.userInfo)")
            }
        })
        return container
    }()

    // MARK: - Core Data Saving support

    func saveContext () {
        let context = persistentContainer.viewContext
        if context.hasChanges {
            do {
                try context.save()
            } catch {
                // Replace this implementation with code to handle the error appropriately.
                // fatalError() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development.
                let nserror = error as NSError
                fatalError("Unresolved error \(nserror), \(nserror.userInfo)")
            }
        }
    }
    «ENDIF-»
    
}
«ENDFILE»

«REM» If there's at least one ImageView with remote source, create ImageDownloadingTask.swift «ENDREM»
«IF viewControllers.imageViews.sourceType.toString().contains("remoteFile")-»
«FILE this.name +"/"+this.name +"/"+ "ImageDownloadingTask.swift"-»
import UIKit

class ImageDownloadingTask {
    
    //Function to download the image
    static func downloadImage(_ url: URL, imageView: UIImageView){
        getDataFromUrl(url) { (data, response, error)  in
            DispatchQueue.main.async { () -> Void in
                guard let data = data, error == nil else { return }
                imageView.image = UIImage(data: data)
            }
        }
    }
    
    //Function to get the data from a url
    static func getDataFromUrl(_ url:URL, completion: @escaping ((_ data: Data?, _ response: URLResponse?, _ error: NSError? ) -> Void)) {
        URLSession.shared.dataTask(with: url, completionHandler: { (data, response, error) in
            completion(data, response, error)
            }) .resume()
        
    }

}
«ENDFILE-»
«ENDIF-»

«IF viewControllers.listViews.size != 0 -»
«REM» If there's at least one "detailed" ListView create custom table view cells «ENDREM»
«IF viewControllers.listViews.listType.toString().contains("detailed") -»
«FILE this.name +"/"+this.name +"/"+ "DetailedTableViewCell.swift"-»
import UIKit

class DetailedTableViewCell: UITableViewCell {

    @IBOutlet weak var img: UIImageView!
    @IBOutlet weak var label: UILabel!
    @IBOutlet weak var content: UILabel!
    @IBOutlet weak var icon: UIImageView!
    
}
«ENDFILE-»
«ENDIF-»

«REM» If there's at least one "image" ListView create custom table view cells «ENDREM»
«IF viewControllers.listViews.listType.toString().contains("image") -»
«FILE this.name +"/"+this.name +"/"+ "ImageTableViewCell.swift"-»
import UIKit

class ImageTableViewCell: UITableViewCell {

    @IBOutlet weak var img: UIImageView!
    @IBOutlet weak var label: UILabel!
    
}
«ENDFILE-»
«ENDIF-»

«REM» If there's at least one "simple" ListView create custom table view cells «ENDREM»
«IF viewControllers.listViews.listType.toString().contains("simple") -»
«FILE this.name +"/"+this.name +"/"+ "SimpleTableViewCell.swift"-»
import UIKit

class SimpleTableViewCell: UITableViewCell {

    @IBOutlet weak var label: UILabel!
    
}
«ENDFILE-»
«ENDIF-»
«ENDIF-»

«IF viewControllers.gridViews.size != 0 -»
«REM» If there's at least one "detailed" GridView create custom table view cells «ENDREM»
«IF viewControllers.gridViews.gridType.toString().contains("detailed") -»
«FILE this.name +"/"+this.name +"/"+ "DetailedCollectionViewCell.swift"-»
import UIKit

class DetailedCollectionViewCell: UICollectionViewCell {
    
    @IBOutlet weak var img: UIImageView!   
    @IBOutlet weak var label: UILabel!
    
}
«ENDFILE-»
«ENDIF-»

«REM» If there's at least one "image" GridView create custom table view cells «ENDREM»
«IF viewControllers.gridViews.gridType.toString().contains("image") -»
«FILE this.name +"/"+this.name +"/"+ "ImageCollectionViewCell.swift"-»
import UIKit

class ImageCollectionViewCell: UICollectionViewCell {
    
    @IBOutlet weak var img: UIImageView!
    
}
«ENDFILE-»
«ENDIF-»

«REM» If there's at least one "simple" GridView create custom table view cells «ENDREM»
«IF viewControllers.gridViews.gridType.toString().contains("simple") -»
«FILE this.name +"/"+this.name +"/"+ "SimpleCollectionViewCell.swift"-»
import UIKit

class SimpleCollectionViewCell: UICollectionViewCell {
       
    @IBOutlet weak var label: UILabel!
    
}
«ENDFILE-»
«ENDIF-»
«ENDIF-»

«ENDDEFINE-»