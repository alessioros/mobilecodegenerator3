«REM»
Copyright 2017 Alessio Rossotti
This file is part of it.polimi.mobilecodegenerator.

it.polimi.mobilecodegenerator is free software: 
you can redistribute it and/or modify it under the terms of the 
GNU General Public License as published by the Free Software Foundation, 
either version 3 of the License, or (at your option) any later version.

it.polimi.mobilecodegenerator is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
See the GNU General Public License for more details.You should have received a copy of the GNU General Public License
along with it.polimi.mobilecodegenerator. If not, see <http://www.gnu.org/licenses/>
«ENDREM»

«IMPORT metamodel»
«EXTENSION ios_extensions::Java»
«EXTENSION app_extensions::Java»
«DEFINE main FOR Application-»

«IF this.dataHandler.preferenceHandler.existsObject()-»
«REM» Core data model«ENDREM»
«FILE this.name+"/"+this.name+"/DataHandlers/PreferenceHandler.swift"-»
//
//  PreferenceHandler.swift
//  «this.name-»
//
//  Automatically generated by MobileCodeGenerator 3.
//  Copyright © 2017 «this.companyIdentifier.split(".").last()-». All rights reserved.
//

import Foundation

class PreferenceHandler{
    
    let defaults:UserDefaults = UserDefaults.standard
    «FOREACH this.dataHandler.preferenceHandler.preferenceRecords AS precord-»
    «IF precord.type.matches("string")-»
    
    func store«precord.key.toFirstUpper()-»(value: «precord.type.toFirstUpper()-»){
        
        defaults.set(value, forKey: "«precord.key-»");
    }
    
    func get«precord.key.toFirstUpper()-»() -> «precord.type.toFirstUpper()-»?{
        
        if defaults.object(forKey: "«precord.key-»") != nil
        {
            return defaults.«precord.type.toLowerCase()-»(forKey: "«precord.key-»");
        }else{
            return nil
        }
    }
    
    func delete«precord.key.toFirstUpper()-»(){
        
        defaults.removeObject(forKey: "«precord.key-»");
        defaults.synchronize()
    }
    «ENDIF-»
    «IF  precord.type.matches("int") || precord.type.matches("long")-»
    
    func store«precord.key.toFirstUpper()-»(value: Int){
        
        defaults.set(value, forKey: "«precord.key-»");
    }
    
    func get«precord.key.toFirstUpper()-»() -> Int{
        
        f defaults.object(forKey: "«precord.key-»") != nil
        {
            return defaults.integer(forKey: "«precord.key-»");
        }else{
            return 0
        }
    }
    
    func delete«precord.key.toFirstUpper()-»(){
        
        defaults.removeObject(forKey: "«precord.key-»");
        defaults.synchronize()
    }
    «ENDIF-»
    «IF  precord.type.matches("float") || precord.type.matches("double")-»
    
    func store«precord.key.toFirstUpper()-»(value: Double){
        
        defaults.set(value, forKey: "«precord.key-»");
    }
    
    func get«precord.key.toFirstUpper()-»() -> Double{
        
        if defaults.object(forKey: "«precord.key-»") != nil
        {
            return defaults.double(forKey: "«precord.key-»");
        }else{
            return 0
        }
    }
    
    func delete«precord.key.toFirstUpper()-»(){
        
        defaults.removeObject(forKey: "«precord.key-»");
        defaults.synchronize()
    }
    «ENDIF-»
    «IF precord.type.matches("boolean")-»
    
    func store«precord.key.toFirstUpper()-»(value: Bool){
        
        defaults.set(value, forKey: "«precord.key-»");
    }
    
    func get«precord.key.toFirstUpper()-»() -> Bool{
        
        if defaults.object(forKey: "«precord.key-»") != nil
        {
            return defaults.bool(forKey: "«precord.key-»");
        }else{
            return nil
        }
    }
    
    func delete«precord.key.toFirstUpper()-»(){
        
        defaults.removeObject(forKey: "«precord.key-»");
        defaults.synchronize()
    }
    «ENDIF-»
	«ENDFOREACH-»
    
    func getPrefDict() -> Dictionary<String, Any>{
        
        return UserDefaults.standard.dictionaryRepresentation()
    }
}
«ENDFILE-»
«ENDIF-»
«ENDDEFINE-»