«REM»
Copyright 2016 Gregorio Perego, Stefania Pezzetti, Aldo Pintus
This file is part of it.polimi.mobilecodegenerator.

it.polimi.mobilecodegenerator is free software: 
you can redistribute it and/or modify it under the terms of the 
GNU General Public License as published by the Free Software Foundation, 
either version 3 of the License, or (at your option) any later version.

it.polimi.mobilecodegenerator is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
See the GNU General Public License for more details.You should have received a copy of the GNU General Public License
along with it.polimi.mobilecodegenerator. If not, see <http://www.gnu.org/licenses/>
«ENDREM»

«IMPORT metamodel»
«EXTENSION ios_extensions::Java»

«DEFINE propertiesDeclarations FOR ViewController-»
«IF audioRecorder!=null-»
	@IBOutlet weak var recordButton: UIButton!
	var audioRecorder: AVAudioRecorder!
	var recordedAudioUrl = NSURL()
	let recordSettings = [
        AVFormatIDKey : Int(kAudioFormatAppleLossless),
		AVEncoderAudioQualityKey : AVAudioQuality.Max.rawValue,
		AVEncoderBitRateKey : 320000,
		AVNumberOfChannelsKey : 2,
		AVSampleRateKey : 44100.0
    ]
«ENDIF-»
«FOREACH audioPlayers AS ap-»
	var «ap.id»: AVAudioPlayer!
«ENDFOREACH-»
«ENDDEFINE-»

«DEFINE viewDidAppear FOR ViewController-»
«FOREACH audioPlayers AS ap-»
«IF !ap.sourceType.toString().matches("hardwareFile")-»
	«IF ap.sourceType.toString().matches("localFile")-»
		«IF !ap.fileUri.matches("")-»
		if let «ap.id»FilePathString = NSBundle.mainBundle().pathForResource("«removeExtension(ap.fileUri)»", ofType: "mp3") {
			let «ap.id»FilePathUrl = NSURL(fileURLWithPath: «ap.id»FilePathString)
			do {
				try «ap.id» = AVAudioPlayer(contentsOfURL: «ap.id»FilePathUrl)
			} catch let error as NSError {
				NSLog("Unable to initialize AVAudioPlayer: \(error.debugDescription)")
			}
		}  
			
		«ELSE-»
		//TODO decomment the next lines and insert file NAME and EXTENSION
		/*
		if let «ap.id»FilePathString = NSBundle.mainBundle().pathForResource("NAME", ofType: "EXTENSION") {
			let «ap.id»FilePathUrl = NSURL(fileURLWithPath: «ap.id»FilePathString)
			do {
				try «ap.id» = AVAudioPlayer(contentsOfURL: «ap.id»FilePathUrl)
			} catch let error as NSError {
				NSLog("Unable to initialize AVAudioPlayer: \(error.debugDescription)")
			}
		}
	    */
		«ENDIF-»
	«ELSEIF ap.sourceType.toString().matches("remoteFile")-»
		«IF !ap.fileUri.matches("")-»
		if let «ap.id»FileRemoteUrl = NSURL(string: "«ap.fileUri»") {
			getDataFromUrl(«ap.id»FileRemoteUrl) { (data, response, error)  in
				dispatch_async(dispatch_get_main_queue()) { () -> Void in
					guard let data = data where error == nil else {
						NSLog("Data error")
						return
					}
					do {
						try self.«ap.id» = AVAudioPlayer(data: data)
					} catch let error as NSError {
						NSLog("Unable to initialize AVAudioPlayer: \(error.debugDescription)")
					}
				}
			}
		}
		«ELSE-»
		//TODO decomment the next lines and insert the URI
		/*
		if let let «ap.id»FileRemoteUrl = NSURL(string: "URI") {
			getDataFromUrl(«ap.id»FileRemoteUrl) { (data, response, error)  in
				dispatch_async(dispatch_get_main_queue()) { () -> Void in
					guard let data = data where error == nil else {
						NSLog("Data error")
						return
					}
					do {
						try self.«ap.id» = AVAudioPlayer(data: data)
					} catch let error as NSError {
						NSLog("Unable to initialize AVAudioPlayer: \(error.debugDescription)")
					}
				}
			}
		}
	    */
		«ENDIF-»
	«ENDIF-»
«ENDIF-»
«ENDFOREACH-»
«ENDDEFINE-»

«DEFINE audio FOR ViewController-»
«REM»Function needed for audioplayers which url is remote or local (not hardware)«ENDREM»
«IF audioPlayers.sourceType.toString().contains("localFile") || audioPlayers.sourceType.toString().contains("remoteFile")-»
	//Function to get the data from a url
	func getDataFromUrl(url:NSURL, completion: ((data: NSData?, response: NSURLResponse?, error: NSError? ) -> Void)) {
	    NSURLSession.sharedSession().dataTaskWithURL(url) { (data, response, error) in
	        completion(data: data, response: response, error: error)
	        }.resume()
	}
«ENDIF-»

«FOREACH audioPlayers AS ap-»
	@IBAction func «ap.id»Play(sender: UIButton) {
	
	«IF !ap.sourceType.toString().matches("hardwareFile")-»
	    self.«ap.id».play()
	«ELSE-»    
	    «IF audioRecorder!=null && audioRecorder.audioPlayerId.matches(ap.id)-»
		if self.audioRecorder != nil && self.«ap.id» != nil {
            if !self.audioRecorder.recording {
                self.«ap.id».play()
            }
        }
        «ELSE-» 
        // Check your model
        // You are missing the audiorecorder or it does not match the audioplayer id
	    «ENDIF-»
	«ENDIF-»
	
	}
	
	@IBAction func «ap.id»Pause(sender: UIButton) {
	
	«IF !ap.sourceType.toString().matches("hardwareFile")-»
	    self.«ap.id».pause()
	«ELSE-»    
	    «IF audioRecorder!=null && audioRecorder.audioPlayerId.matches(ap.id)-»
		if self.audioRecorder != nil && self.«audioRecorder.audioPlayerId» != nil {
            if !self.audioRecorder.recording {
                self.«audioRecorder.audioPlayerId».pause()
            }
        }
        «ELSE-» 
        // Check your model
        // You are missing the audiorecorder or it does not match the audioplayer id
	    «ENDIF-»
	«ENDIF-»
	}
	
	@IBAction func «ap.id»Stop(sender: UIButton) {
	
	«IF !ap.sourceType.toString().matches("hardwareFile")-»
	    self.«ap.id».pause()
	    self.«ap.id».currentTime = 0
	«ELSE-»    
	    «IF audioRecorder!=null && audioRecorder.audioPlayerId.matches(ap.id)-»
	    if self.audioRecorder != nil && self.«audioRecorder.audioPlayerId» != nil {
            if !self.audioRecorder.recording {
                self.«audioRecorder.audioPlayerId».pause()
                self.«audioRecorder.audioPlayerId».currentTime = 0
            }
        }
        «ELSE-» 
        // Check your model
        // You are missing the audiorecorder or it does not match the audioplayer id
	    «ENDIF-»
	«ENDIF-»
	}
«ENDFOREACH-»

«IF audioRecorder != null-»
	@IBAction func record(sender: UIButton) {
		if self.recordButton.titleLabel?.text == "Rec" {
            self.recordButton.setTitle("Stop", forState: UIControlState.Normal)
            do {
                try self.audioRecorder = AVAudioRecorder(URL: createFileUrl(), settings: self.recordSettings as! [String : AnyObject])
            } catch {
                NSLog("Unable to initialize AVAudioRecorder")
            }
            self.audioRecorder.prepareToRecord()
            self.audioRecorder.record()
		} else {
            self.recordButton.setTitle("Rec", forState: UIControlState.Normal)
            self.audioRecorder.stop()
            «IF !audioRecorder.audioPlayerId.matches("")-»
			do {
                try self.«audioRecorder.audioPlayerId» = AVAudioPlayer(contentsOfURL: self.recordedAudioUrl)
            } catch {
                NSLog("Unable to initialize AVAudioPlayer")
            }
            self.«audioRecorder.audioPlayerId».prepareToPlay()
            «ENDIF-»
            
		}
	}
	
	func getCacheDirectory() -> String {
        let paths = NSSearchPathForDirectoriesInDomains(.DocumentDirectory, .UserDomainMask, true)
        return paths[0]
    }
    
    func createFileUrl() -> NSURL {
        let dateFormatter = NSDateFormatter()
        dateFormatter.dateFormat = "yyyy-MM-dd_HH-mm-ss"
        
        let fileName: String = dateFormatter.stringFromDate(NSDate()).stringByAppendingString(".m4a")
        let filePath: String = getCacheDirectory().stringByAppendingString("/\(fileName)")
        
        self.recordedAudioUrl = NSURL(fileURLWithPath: filePath)
        return self.recordedAudioUrl
    }
«ENDIF-»
«ENDDEFINE-»

«DEFINE viewDidDisappear FOR ViewController-»
	«IF audioRecorder!=null-»
		if self.audioRecorder != nil && self.audioRecorder.recording {
		    self.recordButton.setTitle("Rec", forState: UIControlState.Normal)
			self.audioRecorder.stop()
		}
	«ENDIF-»
	«FOREACH audioPlayers AS ap-»
		if self.«ap.id» != nil && self.«ap.id».playing {
		    self.«ap.id».pause()
		    self.«ap.id».currentTime = 0
		}
	«ENDFOREACH-»
«ENDDEFINE-»