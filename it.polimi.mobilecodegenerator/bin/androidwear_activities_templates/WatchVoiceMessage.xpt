«REM»
Copyright 2016 Aldo Pintus
This file is part of it.polimi.mobilecodegenerator.

it.polimi.mobilecodegenerator is free software: 
you can redistribute it and/or modify it under the terms of the 
GNU General Public License as published by the Free Software Foundation, 
either version 3 of the License, or (at your option) any later version.

it.polimi.mobilecodegenerator is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
See the GNU General Public License for more details.You should have received a copy of the GNU General Public License
along with it.polimi.mobilecodegenerator. If not, see <http://www.gnu.org/licenses/>
«ENDREM»

«IMPORT metamodel»

«DEFINE attributesDeclarations FOR WatchController-»
«IF watchVoiceMessage != null -»
private static final String MESSAGE_PATH = "/wear-app-message";
private static final int SPEECH_REQUEST_CODE = 0;

private Node mNode;
private GoogleApiClient mGoogleApiClient;
private boolean mResolvingError = false;
private String voiceMessageContent;

private DelayedConfirmationView.DelayedConfirmationListener mDelayedConfirmationListener;

private Button «watchVoiceMessage.id»;
private RelativeLayout mDelayedViewContainer;
private DelayedConfirmationView mDelayedView;
private TextView mDelayedViewTextView;
«ENDIF-»
«ENDDEFINE-»

«DEFINE onCreate FOR WatchController-»
«IF watchVoiceMessage != null -»
mDelayedConfirmationListener = this;

mGoogleApiClient = new GoogleApiClient.Builder(this)
        .addApi(Wearable.API)
        .addConnectionCallbacks(this)
        .addOnConnectionFailedListener(this)
        .build();
«ENDIF-»
«ENDDEFINE-»

«DEFINE onLayoutInflated FOR WatchController-»
«IF watchVoiceMessage != null -»
mDelayedViewContainer = (RelativeLayout) stub.findViewById(R.id.delayed_confirm_container);
mDelayedViewTextView = (TextView) stub.findViewById(R.id.delayed_confirm_text_view);
mDelayedView = (DelayedConfirmationView) stub.findViewById(R.id.delayed_confirm);
mDelayedView.setListener(mDelayedConfirmationListener);

«watchVoiceMessage.id» = (Button) stub.findViewById(R.id.«watchVoiceMessage.id»);
«watchVoiceMessage.id».setOnClickListener(new View.OnClickListener() {
    @Override
    public void onClick(View v) {
        displaySpeechRecognizer();
    }
});
«ENDIF-»
«ENDDEFINE-»

«DEFINE watchVoiceMessage FOR WatchController-»
«IF watchVoiceMessage != null -»
private void displayDelayedViewContainer() {
	mDelayedView.setTotalTimeMs(3000);
	mDelayedViewTextView.setText(voiceMessageContent);
	mDelayedViewContainer.animate()
	        .alpha(1.0f)
	        .setDuration(0)
	        .setListener(new AnimatorListenerAdapter() {
	            @Override
	            public void onAnimationEnd(Animator animation) {
	                super.onAnimationEnd(animation);
	                mDelayedView.start();
	            }
	        });

}

private void hideDelayedViewContainer() {
    mDelayedViewContainer.animate()
            .translationX(-mDelayedViewContainer.getWidth())
            .alpha(0.0f)
            .setDuration(500)
            .setListener(new AnimatorListenerAdapter() {
                @Override
                public void onAnimationEnd(Animator animation) {
                    super.onAnimationEnd(animation);
                    mDelayedViewContainer.animate().translationX(0);
                    mDelayedView.reset();
                }
            });
}

@Override
protected void onActivityResult(int requestCode, int resultCode, Intent data) {
    super.onActivityResult(requestCode, resultCode, data);
    if (requestCode == SPEECH_REQUEST_CODE && resultCode == RESULT_OK) {
        List<String> results = data.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS);
        voiceMessageContent = results.get(0);
        displayDelayedViewContainer();
    }
}

@Override
public void onTimerFinished(View view) {
    hideDelayedViewContainer();
    sendMessage(voiceMessageContent);
}

@Override
public void onTimerSelected(View view) {
    hideDelayedViewContainer();
}

private void sendMessage(String message) {

    final byte[] messageData = message.getBytes();

    if (mNode != null && mGoogleApiClient!=null && mGoogleApiClient.isConnected()) {
        Wearable.MessageApi.sendMessage(
                mGoogleApiClient, mNode.getId(), MESSAGE_PATH, messageData).setResultCallback(

                new ResultCallback<MessageApi.SendMessageResult>() {
                    @Override
                    public void onResult(MessageApi.SendMessageResult sendMessageResult) {

                        if (!sendMessageResult.getStatus().isSuccess()) {
                            displayFailureConfirmation("Message Failure");
                        } else {
                            displaySuccessConfirmation("Message Sent");
                        }
                    }
                }
        );
    } else {
        displayFailureConfirmation("Connection Error");
    }

}

private void displaySuccessConfirmation(String extraMessage) {
    Intent intent = new Intent(this, ConfirmationActivity.class);
    intent.putExtra(ConfirmationActivity.EXTRA_ANIMATION_TYPE,
            ConfirmationActivity.SUCCESS_ANIMATION);
    intent.putExtra(ConfirmationActivity.EXTRA_MESSAGE, extraMessage);
    startActivity(intent);
}

private void displayFailureConfirmation(String extraMessage) {
    Intent intent = new Intent(this, ConfirmationActivity.class);
    intent.putExtra(ConfirmationActivity.EXTRA_ANIMATION_TYPE,
            ConfirmationActivity.FAILURE_ANIMATION);
    intent.putExtra(ConfirmationActivity.EXTRA_MESSAGE, extraMessage);
    startActivity(intent);
}

private void displaySpeechRecognizer() {
    Intent intent = new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);
    intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL,
            RecognizerIntent.LANGUAGE_MODEL_FREE_FORM);
    startActivityForResult(intent, SPEECH_REQUEST_CODE);
}

private void resolveNode() {
    Wearable.NodeApi.getConnectedNodes(mGoogleApiClient).setResultCallback(new ResultCallback<NodeApi.GetConnectedNodesResult>() {
        @Override
        public void onResult(NodeApi.GetConnectedNodesResult nodes) {
            for (Node node : nodes.getNodes()) {
                mNode = node;
            }
        }
    });
}

@Override
protected void onStart() {
    super.onStart();
    if (!mResolvingError) {
        mGoogleApiClient.connect();
    }
}

@Override
public void onConnected(Bundle bundle) {
    resolveNode();
}

@Override
public void onConnectionSuspended(int i) {
    //TODO implement the action
}

@Override
public void onConnectionFailed(ConnectionResult connectionResult) {
    //TODO implement the action
}
«ENDIF-»
«ENDDEFINE-»

