«REM»
Copyright 2017 Alessio Rossotti
This file is part of it.polimi.mobilecodegenerator.

it.polimi.mobilecodegenerator is free software: 
you can redistribute it and/or modify it under the terms of the 
GNU General Public License as published by the Free Software Foundation, 
either version 3 of the License, or (at your option) any later version.

it.polimi.mobilecodegenerator is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
See the GNU General Public License for more details.You should have received a copy of the GNU General Public License
along with it.polimi.mobilecodegenerator. If not, see <http://www.gnu.org/licenses/>
«ENDREM»
«IMPORT metamodel»

«DEFINE main FOR Application-»
«EXPAND storage FOR dataHandler.storageHandler-»
«ENDDEFINE-»

«DEFINE storage FOR StorageHandler-»
«FILE dataHandler.application.name+"/mobile/src/main/java/"+dataHandler.application.companyIdentifier.replaceAll("\\.","/") +"/"+dataHandler.application.name.toLowerCase() +"/data/StorageHandler.java"-»
package «dataHandler.application.companyIdentifier».«dataHandler.application.name.toLowerCase()».data;

import android.content.Context;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.lang.StringBuilder;

public class StorageHandler{

	private Context context;
	«FOREACH this.storageRecords AS SR-»
	String «SR.name-» = "«SR.name-»";
	«ENDFOREACH-»
	
	/**
	* Constructor
	* 
	* @param context
	*/
	public StorageHandler(Context context){
		this.context=context;
	}
	
	/**
	* Method that writes the content to the file
	* 
	* @param fileName the name of the file
	* @param content the string content to write
	* @return boolean success
	*/
	public boolean writeFile(String fileName, String content){
		
		File file = new File(this.context.getFilesDir(), fileName);
		FileOutputStream outputStream = null;
		try {
		    outputStream = new FileOutputStream(file);
		    outputStream.write(content.getBytes());
		    outputStream.close();
		} catch (Exception e) {
		    e.printStackTrace();
		    return false;
		}
		return true;
	}
	
    /**
	* Method that reads the content of a file
	* 
	* @param fileName the name of the file
	* @param isTemp if the file is temporary or not
	* @return content
	*/
	public String readfile(String fileName){
 
 		StringBuilder fileContent;
		try {
			File file = new File(this.context.getFilesDir(), fileName);
			
		    FileReader fileR = new FileReader(file);
		    BufferedReader bufferedReader = new BufferedReader(fileR);
		    fileContent = new StringBuilder();
   			String line;
			while ((line = bufferedReader.readLine()) != null) {
				fileContent.append(line).append("\n");
			}
		   	
		} catch (Exception e) {
		    e.printStackTrace();
		    return "";
		}
		return fileContent.toString();
	}
     
    /**
    * Method that deletes the file
	* 
	* @param fileName the name of the file
	* @param isTemp if the file is temporary or not
	* @return boolean success
	*/
	public boolean deleteFile(String fileName, boolean isTemp){
		
		File file = null;
		try {
			if(isTemp){
				file = new File(this.context.getCacheDir(), fileName);
			}else{
				file = new File(this.context.getFilesDir(), fileName);
			}
		    file.delete();
		} catch (Exception e) {
		    e.printStackTrace();
		    return false;
		}
		return true;
	}
}
«ENDFILE-»
«ENDDEFINE-»