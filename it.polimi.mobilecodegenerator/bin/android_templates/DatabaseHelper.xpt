«REM»
Copyright 2017 Alessio Rossotti
This file is part of it.polimi.mobilecodegenerator.

it.polimi.mobilecodegenerator is free software: 
you can redistribute it and/or modify it under the terms of the 
GNU General Public License as published by the Free Software Foundation, 
either version 3 of the License, or (at your option) any later version.

it.polimi.mobilecodegenerator is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
See the GNU General Public License for more details.You should have received a copy of the GNU General Public License
along with it.polimi.mobilecodegenerator. If not, see <http://www.gnu.org/licenses/>
«ENDREM»

«IMPORT metamodel»

«EXTENSION app_extensions::Java»

«DEFINE main FOR Application-»
«EXPAND dbHelper FOR dataHandler.databaseHandler-»
«EXPAND databaseStrings FOR dataHandler.databaseHandler-»
«ENDDEFINE-»

«REM» ---------------------- DatabaseHelper Class ---------------------- «ENDREM»
«DEFINE dbHelper FOR DatabaseHandler-»
«FILE dataHandler.application.name+"/mobile/src/main/java/"+dataHandler.application.companyIdentifier.replaceAll("\\.","/") +"/"+dataHandler.application.name.toLowerCase() +"/data/DBHelper.java"-»
package «dataHandler.application.companyIdentifier».«dataHandler.application.name.toLowerCase()».data;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;

public class DBHelper extends SQLiteOpenHelper{
	
	// If you change the database schema, you must increment the database version.
    private static final int DATABASE_VERSION = 1;
    private static final String DATABASE_NAME = "SQLITE_DB";
    
	public DBHelper(Context context){
		super(context, DATABASE_NAME, null, DATABASE_VERSION);
	}
	
	@Override
	public void onCreate(SQLiteDatabase db) {
		«EXPAND dbCreateQuery FOREACH entities-»
    }
    
    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
    	Log.w(DBHelper.class.getName(), "Upgrading database from version " + oldVersion + " to " + newVersion + ", which will destroy all old data");
        «EXPAND dbDeleteQuery FOREACH entities-»
        onCreate(db);
    }
}
«ENDFILE-»
«ENDDEFINE-»

«REM» for each entity the string query that creates the table «ENDREM»
«DEFINE dbCreateQuery FOR Entity-»

	String CREATE_«name.toUpperCase()»="CREATE TABLE "+DatabaseStrings.TBL_«name.toUpperCase()»+
                " (" + DatabaseStrings.«name.toUpperCase()»_ID + " TEXT PRIMARY KEY," +
                
                «IF entityRelationships.isEmpty-»
	                «EXPAND attListCreate FOR entityAttributes.withoutLast()-»
	                «EXPAND attributeCreateLast FOR entityAttributes.last()-»
                «ELSE-»
	                «IF entityRelationships.exists(e|e.type.matches("N : 1"))-»
	                	«EXPAND attListCreate FOR entityAttributes-»
	                	«EXPAND attListCreateForeign FOR entityRelationships-»
	                	«IF entityRelationships.exists(e|e.type.matches("1 : 1"))-»
	                		«EXPAND foreignKeyOneOne FOR entityRelationships-»
	                		«EXPAND foreignKeyLastNOne FOR entityRelationships-»
	                	«ELSE-»
	                		«EXPAND foreignKeyLastNOne FOR entityRelationships-»
	                	«ENDIF-»
	                «ELSE-»
	                	«IF entityRelationships.exists(e|e.type.matches("1 : 1"))-»
	                		«EXPAND attListCreate FOR entityAttributes-»
	                		«EXPAND attListCreateForeign FOR entityRelationships-»
	                		«EXPAND foreignKeyLastOneOne FOR entityRelationships-»
	                	«ELSE-»
	                		«EXPAND attListCreate FOR entityAttributes.withoutLast()-»
	                		«EXPAND attributeCreateLast FOR entityAttributes.last()-»
	                	«ENDIF-»	
	                «ENDIF-»	          
               «ENDIF-»
            
  	db.execSQL(CREATE_«name.toUpperCase()»);
  	
  	«IF entityRelationships.exists(e|e.type.matches("N : N"))-»
		«EXPAND intermediateTable FOR entityRelationships-»	                	
	«ENDIF-» 	
«ENDDEFINE-»
«REM» for each entity the string query that drops the table «ENDREM»
«DEFINE dbDeleteQuery FOR Entity-»
  	db.execSQL("DROP TABLE IF EXISTS " + DatabaseStrings.TBL_«name.toUpperCase()»);
«ENDDEFINE-»

«DEFINE attListCreate FOR List[EntityAttribute]-»
«FOREACH this AS EA-»
«IF EA.type.matches('String') || EA.type.matches('Date') -»
	DatabaseStrings.«EA.entity.name.toUpperCase()»_«EA.name.toUpperCase()»+" TEXT," +
«ENDIF-»
«IF EA.type.matches('Integer') || EA.type.matches('Boolean')-»
	DatabaseStrings.«EA.entity.name.toUpperCase()»_«EA.name.toUpperCase()»+" INT," +
«ENDIF-»
«IF EA.type.matches('Float') || EA.type.matches('Double')-»
	DatabaseStrings.«EA.entity.name.toUpperCase()»_«EA.name.toUpperCase()»+" REAL," +
«ENDIF-»
«ENDFOREACH-»
«ENDDEFINE-»

«DEFINE attListCreateForeign FOR List[EntityRelationship]-»
«FOREACH this AS ER-»
«IF ER.type.matches('N : 1') || ER.type.matches('1 : 1') -»
	DatabaseStrings.«ER.destination.toUpperCase()»_ID+" TEXT," +
«ENDIF-»
«ENDFOREACH-»
«ENDDEFINE-»

«DEFINE foreignKeyOneOne FOR List[EntityRelationship]-»
«FOREACH this AS ER-»
«IF ER.type.matches("1 : 1")-»
" FOREIGN KEY ("+DatabaseStrings.«ER.destination.toUpperCase()-»_ID+") REFERENCES "+DatabaseStrings.TBL_«ER.destination.toUpperCase()-»+"("+DatabaseStrings.«ER.destination.toUpperCase()-»_ID +")," +
«this.remove(ER)-»
«ENDIF-»
«ENDFOREACH-»
«ENDDEFINE-»

«DEFINE foreignKeyNOne FOR List[EntityRelationship]-»
«FOREACH this AS ER-»
«IF ER.type.matches("N : 1")-»
" FOREIGN KEY ("+DatabaseStrings.«ER.destination.toUpperCase()-»_ID+") REFERENCES "+DatabaseStrings.TBL_«ER.destination.toUpperCase()-»+"("+DatabaseStrings.«ER.destination.toUpperCase()-»_ID +")," +
«this.remove(ER)-»
«ENDIF-»
«ENDFOREACH-»
«ENDDEFINE-»

«DEFINE foreignKeyLastOneOne FOR List[EntityRelationship]-»
«FOREACH this.withoutLast() AS ER-»
" FOREIGN KEY ("+DatabaseStrings.«ER.destination.toUpperCase()-»_ID+") REFERENCES "+DatabaseStrings.TBL_«ER.destination.toUpperCase()-»+"("+DatabaseStrings.«ER.destination.toUpperCase()-»_ID +")," +
«ENDFOREACH-»
" FOREIGN KEY ("+DatabaseStrings.«this.last().destination.toUpperCase()-»_ID+") REFERENCES "+DatabaseStrings.TBL_«this.last().destination.toUpperCase()-»+"("+DatabaseStrings.«this.last().destination.toUpperCase()-»_ID+"));";
«ENDDEFINE-»

«DEFINE foreignKeyLastNOne FOR List[EntityRelationship]-»
«FOREACH this.withoutLast() AS ER-»
" FOREIGN KEY ("+DatabaseStrings.«ER.destination.toUpperCase()-»_ID+") REFERENCES "+DatabaseStrings.TBL_«ER.destination.toUpperCase()-»+"("+DatabaseStrings.«ER.destination.toUpperCase()-»_ID +")," +
«ENDFOREACH-»
" FOREIGN KEY ("+DatabaseStrings.«this.last().destination.toUpperCase()-»_ID+") REFERENCES "+DatabaseStrings.TBL_«this.last().destination.toUpperCase()-»+"("+DatabaseStrings.«this.last().destination.toUpperCase()-»_ID+"));";
«ENDDEFINE-»

«DEFINE intermediateTable FOR List[EntityRelationship]-»
«FOREACH this AS NNER-»
«IF NNER.type.matches("N : N")-»
///// TODO CREATE TABLE NN /////////////
String CREATE_«NNER.name.toUpperCase()»_«NNER.destination.toUpperCase()»="CREATE TABLE "+DatabaseStrings.TBL_«NNER.name.toUpperCase()»_«NNER.destination.toUpperCase()»+";"

db.execSQL(CREATE_«name.toUpperCase()»);
«ENDIF-»
«ENDFOREACH-»
«ENDDEFINE-»

«DEFINE attributeCreateLast FOR EntityAttribute-»
«IF type.matches('String') || type.matches('Date') -»
	DatabaseStrings.«entity.name.toUpperCase()»_«name.toUpperCase()»+" TEXT)";
«ENDIF-»
«IF type.matches('Integer') || type.matches('Boolean')-»
	DatabaseStrings.«entity.name.toUpperCase()»_«name.toUpperCase()»+" INT)";
«ENDIF-»
«IF type.matches('Float') || type.matches('Double')-»
	DatabaseStrings.«entity.name.toUpperCase()»_«name.toUpperCase()»+" REAL)";
«ENDIF-»
«ENDDEFINE-»

«REM» ---------------------- DatabaseStrings Class ---------------------- «ENDREM»
«DEFINE databaseStrings FOR DatabaseHandler-»

«FILE dataHandler.application.name+"/mobile/src/main/java/"+dataHandler.application.companyIdentifier.replaceAll("\\.","/") +"/"+dataHandler.application.name.toLowerCase() +"/data/DatabaseStrings.java"-»
package «dataHandler.application.companyIdentifier».«dataHandler.application.name.toLowerCase()».data;

class DatabaseStrings{

	«EXPAND entityStrings FOREACH entities-»
}
«ENDFILE-»
«ENDDEFINE-»

«REM» for each entity strings representing name and attributes «ENDREM»
«DEFINE entityStrings FOR Entity-»
	/* Strings for table «name»*/
	static final String TBL_«name.toUpperCase()» = "«name»";
	static final String «name.toUpperCase()»_ID = "«primaryKey»";
	«EXPAND attributeString FOREACH entityAttributes-»
«ENDDEFINE-»

«DEFINE attributeString FOR EntityAttribute-»
static final String «entity.name.toUpperCase()»_«name.toUpperCase()» = "«name»";
«ENDDEFINE-»