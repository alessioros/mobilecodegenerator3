«REM»
Copyright 2017 Alessio Rossotti
This file is part of it.polimi.mobilecodegenerator.

it.polimi.mobilecodegenerator is free software: 
you can redistribute it and/or modify it under the terms of the 
GNU General Public License as published by the Free Software Foundation, 
either version 3 of the License, or (at your option) any later version.

it.polimi.mobilecodegenerator is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
See the GNU General Public License for more details.You should have received a copy of the GNU General Public License
along with it.polimi.mobilecodegenerator. If not, see <http://www.gnu.org/licenses/>
«ENDREM»

«IMPORT metamodel»

«DEFINE main FOR Application-»
«EXPAND firebase FOR dataHandler.cloudHandler-»
«ENDDEFINE-»

«DEFINE firebase FOR CloudHandler-»
«FILE dataHandler.application.name+"/mobile/src/main/java/"+dataHandler.application.companyIdentifier.replaceAll("\\.","/") +"/"+dataHandler.application.name.toLowerCase() +"/data/CloudHandler.java"-»
package «dataHandler.application.companyIdentifier».«dataHandler.application.name.toLowerCase()».data;

import android.util.Log;

import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;

«FOREACH this.cloudObjects AS CO-»
import «CO.cloudHandler.dataHandler.application.companyIdentifier-».«CO.cloudHandler.dataHandler.application.name.toLowerCase()-».objects.«CO.name.toFirstUpper()-»;
«ENDFOREACH-»

/* this class contains generic functions in order to interface with Firebase realtime database
* for configuring and managing your cloud database visit: https://console.firebase.google.com/
* for more complete examples visit: https://firebase.google.com/docs/database
*/

public class CloudHandler{
	
	private FirebaseDatabase fDB;
	
	public CloudHandler(){
		fDB = FirebaseDatabase.getInstance();
	}
	
	/*
	* returns the reference to the database at the specified location
	* @param reference the string of the location (example reference = "users")
	*/
	public DatabaseReference getReference(String reference){
		
		return this.fDB.getReference(reference);
	}
	
	/*
	* allows to manipulate data in realtime
	* @param reference the DatabaseReference
	*/
	public void addListener(DatabaseReference reference){
		
		reference.addValueEventListener(new ValueEventListener() {
		    @Override
		    public void onDataChange(DataSnapshot dataSnapshot) {
		        // This method is called once with the initial value and again
		        // whenever data at this location is updated.
		        // for a callback called just once -> addListenerForSingleValueEvent()
		        String value = dataSnapshot.getValue(String.class);
		        Log.d("FIREBASE", "Value is: " + value);
		    }
		
		    @Override
		    public void onCancelled(DatabaseError error) {
		        // Failed to read value
		        Log.w("FIREBASE", "Failed to read value.", error.toException());
		    }
		});
	}
	
	«FOREACH this.cloudObjects AS CO-»
	/*
	* allows to add a new object to the database
	* @param object
	*/
	public void add«CO.name.toFirstUpper()-»(«CO.name.toFirstUpper()-» «CO.name.toLowerCase()-»){
	
		// modify the reference and the ID with the values in your Firebase console
		/*try{
			
			//checks if user already exists
			DatabaseReference ref = getReference("«CO.name.toLowerCase()-»s").child("«CO.name.toLowerCase()-».get«CO.name.toLowerCase()-»_ID");
            ref.addListenerForSingleValueEvent(new ValueEventListener() {
            	@Override
                public void onDataChange(DataSnapshot snapshot) {
	                if (snapshot.exists()) {
                        // handle the case that object already exists
                    }
                    else {
	                    ref.setValue(«CO.name.toLowerCase()-»);
                    }
                    progressDialog.dismiss();
                }

                @Override
                public void onCancelled(DatabaseError databaseError) {}
            });
			
		}catch(Exception e){
			e.printStackTrace();
			return false;
		}
		
		return true;
	
		*/
	}
	
	/*
	* allows to update an object in the database
	* @param object
	*/
	public void update«CO.name.toFirstUpper()-»(«EXPAND objParameters FOR CO.objectAttributes-»){
	
		«CO.name.toFirstUpper()-» «CO.name.toLowerCase()-» = new «CO.name.toFirstUpper()-»(«EXPAND attributesNames FOR CO.objectAttributes-»);
		// modify the reference and the ID with the values in your Firebase console
		/*try{
			getReference("«CO.name.toLowerCase()-»s").child("«CO.name.toLowerCase()-»_ID").setValue(«CO.name.toLowerCase()-»);
		}catch(Exception e){
			e.printStackTrace();
			return false;
		}
		
		return true;
	
		*/
	}
	
	/*
	* allows to delete an object from the database
	* @param objectId
	*/
	public void delete«CO.name.toFirstUpper()-»(String objectId){
	
		// modify the reference and the ID with the values in your Firebase console
		//getReference("«CO.name.toLowerCase()-»s").child(objectId).removeValue();
	}
	«ENDFOREACH-»
	
}
«ENDFILE-»
«REM» define a Java class foreach object to store «ENDREM»
«FOREACH this.cloudObjects AS CO-»
«FILE dataHandler.application.name+"/mobile/src/main/java/"+dataHandler.application.companyIdentifier.replaceAll("\\.","/") +"/"+dataHandler.application.name.toLowerCase() +"/objects/"+CO.name.toFirstUpper()+".java"-»
package «dataHandler.application.companyIdentifier».«dataHandler.application.name.toLowerCase()».objects;

public class «CO.name.toFirstUpper()»{
	
	«EXPAND attributesDecl FOR CO.objectAttributes-»

	public «CO.name.toFirstUpper()»(){
		
	}
	
	public «CO.name.toFirstUpper()»(«EXPAND objParameters FOR CO.objectAttributes-»){
		«EXPAND attributesAssign FOR CO.objectAttributes-»
	}
	
	«FOREACH CO.objectAttributes AS Att-»
	public void set«Att.name.toFirstUpper()-»(«Att.type-» «Att.name.toLowerCase()-»){
		this.«Att.name.toLowerCase()-» = «Att.name.toLowerCase()-»;
	}
	
	public «Att.type-» get«Att.name.toFirstUpper()-»(){
		return this.«Att.name.toLowerCase()-»;
	}
	«ENDFOREACH-»
}
«ENDFILE-»
«ENDFOREACH-»
«ENDDEFINE-»

«DEFINE attributesDecl FOR List[ObjectAttribute]-»
«FOREACH this AS OA-»
«IF OA.type.matches('String')-»
public String «OA.name.toLowerCase()»;
«ENDIF-»
«IF OA.type.matches('Integer')-»
public int «OA.name.toLowerCase()»;
«ENDIF-»
«IF OA.type.matches('Float')-»
public float «OA.name.toLowerCase()»;
«ENDIF-»
«IF OA.type.matches('Double')-»
public Double «OA.name.toLowerCase()»;
«ENDIF-»
«IF OA.type.matches('Boolean')-»
public boolean «OA.name.toLowerCase()»;
«ENDIF-»
«IF OA.type.matches('Object')-»
public «OA.object» «OA.name.toLowerCase()»;
«ENDIF-»
«IF OA.type.matches('Object list')-»
public ArrayList<«OA.object»> «OA.name.toLowerCase()»;
«ENDIF-»
«ENDFOREACH-»
«ENDDEFINE-»

«DEFINE objParameters FOR List[ObjectAttribute]-»
«FOREACH this.withoutLast() AS OA-»
«IF OA.type.matches('String')-»
String «OA.name.toLowerCase()»,
«ENDIF-»
«IF OA.type.matches('Integer')-»
int «OA.name.toLowerCase()»,
«ENDIF-»
«IF OA.type.matches('Float')-»
float «OA.name.toLowerCase()»,
«ENDIF-»
«IF OA.type.matches('Double')-»
Double «OA.name.toLowerCase()»,
«ENDIF-»
«IF OA.type.matches('Boolean')-»
boolean «OA.name.toLowerCase()»,
«ENDIF-»
«IF OA.type.matches('Object')-»
«OA.object» «OA.name.toLowerCase()»,
«ENDIF-»
«IF OA.type.matches('Object list')-»
ArrayList<«OA.object»> «OA.name.toLowerCase()»,
«ENDIF-»
«ENDFOREACH-»
«IF this.last().type.matches('String')-»
String «this.last().name.toLowerCase()»
«ENDIF-»
«IF this.last().type.matches('Integer')-»
int «this.last().name.toLowerCase()»
«ENDIF-»
«IF this.last().type.matches('Float')-»
float «this.last().name.toLowerCase()»
«ENDIF-»
«IF this.last().type.matches('Double')-»
Double «this.last().name.toLowerCase()»
«ENDIF-»
«IF this.last().type.matches('Boolean')-»
boolean «this.last().name.toLowerCase()»
«ENDIF-»
«IF this.last().type.matches('Object')-»
«this.last().object» «this.last().name.toLowerCase()»
«ENDIF-»
«IF this.last().type.matches('Object list')-»
ArrayList<«this.last().object»> «this.last().name.toLowerCase()»
«ENDIF-»
«ENDDEFINE-»

«DEFINE attributesAssign FOR List[ObjectAttribute]-»
«FOREACH this AS OA-»
this.«OA.name.toLowerCase()» = «OA.name.toLowerCase()»;
«ENDFOREACH-»
«ENDDEFINE-»

«DEFINE attributesNames FOR List[ObjectAttribute]-»
«FOREACH this.withoutLast() AS OA-»
«OA.name.toLowerCase()»,
«ENDFOREACH-»
«this.last().name.toLowerCase()»
«ENDDEFINE-»
